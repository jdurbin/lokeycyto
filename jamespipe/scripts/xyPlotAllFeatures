#!/usr/bin/env groovy 
/*
* Scatter plot of features vs molarity.  Just a quick way to look at how 
* all the values are responding to the compounds. 
*
* The data layout in wells can be quite confusing.  Here are some notes: 
* 
* Note: It looks to me like each compound is present in 16 different wells, 
* one each for each of 8 molarities plus a replicate. 
* 
* There are four quadrants per well, so for the average features there will be
* 64 values per feature.   For the per cell, the sky's the limit, as each cell
* will have it's own value. 
*
* SeriesID and SiteID seem to identify one of the 4 quadrants x 2 replicates
* for a total of 8 distinct SeriesIDs per molarity. 
*
* There are two distinct Wells for each molarity.  So with 8 molarities, 
* there are 16 distinct wells involved.
*  
* 
*/
import groovy.sql.Sql
import org.h2.Driver

import durbin.util.*;
import durbin.charts.*;
import javax.swing.*;
import java.awt.*;

import org.jfree.data.xy.*;
import org.jfree.ui.*;
import org.jfree.chart.title.*;
import org.jfree.chart.axis.*;


if (args.length < 2){
  println """
    xyPlotAllFeatures PerCompoundCSV GifOut
  
    For each feature, generates a scatter plot of that feature versus 
    molarity of treated compound. Presents all of these plots in a grid of 
    plots on one page.  The PerCompoundCSV file is a file that has been 
    created by doing a join between the raw data file and a platemap file, 
    for example by using extactPerCompoundFiles script. 

    EXAMPLE: 
    xyPlotAllFeatures Benomyl.csv PlateMap2.csv Benomyl.gif
  
  """  
  System.exit(1)
}

compoundcsv = args[0]
outFile = args[1]

// Create a 10x10 grid panel to hold all of our charts...
panel = new JPanel()
panel.setLayout(new GridLayout(10,10));

// Create an h2 jdbc database. 
// mem says in-memory db, and call it what you like, here db1 
def db = Sql.newInstance("jdbc:h2:mem:data","org.h2.Driver")
System.err.print "Reading data table $compoundcsv..."
db.execute("create table data as select * from csvread('$compoundcsv')" as String)
System.err.println "done."

// Get all of the feature names from the table...
query = """
select column_name from information_schema.columns where table_name = 'DATA';"""
columnNames = query(db,query)
  
// Some columns are not useful for plotting feature values vs molarity...
skipColumns = ['COMPOUND','MOLARITY','CELLID','INSTANCE','PLATEID',
'RUNSETTINGSID','SERIESID','SITEID','WELLNAME','WELLX','WELLY'] as Set
    
// There's no global cell count, so we create our own and plot that...
// seriesid picks out the 4 cells...
query = """
select Molarity,count(cellid) from data where true group by Molarity,seriesid;""" as String
//plot = createPlotFromQuery(db,query,"Number of CELLS")
plot = createHistogramFromQuery(db,query,"Number of CELLS")
plot.getChart().getPlot().setDomainAxis(new LogAxis("Molarity"))
if (plot != null) panel.add(plot)

// for each feature, get values vs titration and create a scatter plot of 
// values vs titration. 
featureCount = 0;
columnNames.each{cName->
    
  // Skip non feature columns...
  if (skipColumns.contains(cName)) return;
    
  query = """
  select Molarity,$cName from data where true;""" as String    
//  plot = createPlotFromQuery(db,query,cName) 
  plot = createHistogramFromQuery(db,query,cName) 
  plot.getChart().getPlot().setDomainAxis(new LogAxis("Molarity")) 
  if (plot != null) panel.add(plot)    
  
  featureCount++;
}
println "$featureCount features plotted."

// Save result to a file...
print "Rendering plots to $outFile..."
ImageUtils.savePanelAsGIF(panel,outFile)
println "done."


/*****************************************************************/
/************************* Methods *******************************/
/*****************************************************************/


/**
* Perform a query returning x,y values pairs and create a plot
* based on this query. 
*/ 
def createHistogramFromQuery(db,query,cName){
  xyvalues = queryXYPair(db,query) 
     
  if (xyvalues != null){
    println "Plotting $cName. Num values: "+xyvalues.getItemCount()
    
    series = new XYSeriesCollection()
    series.addSeries(xyvalues)
    chartTitle = "$cName"
    chartpanel = BasicCharts.histogram(chartTitle,"Value","Count",series,250,166) 
    // Make font smaller than default...    
    titleFont = new java.awt.Font("SansSerif", java.awt.Font.BOLD,9)
    title = new org.jfree.chart.title.TextTitle(chartTitle,titleFont)
    chartpanel.getChart().setTitle(title);
    return(chartpanel)
  }else{
    println "Skipping $cName (has NULL values).  Num values: "+xyvalues.getItemCount()
    return(null)
  }
}


/**
* Perform a query returning x,y values pairs and create a plot
* based on this query. 
*/ 
def createPlotFromQuery(db,query,cName){
  xyvalues = queryXYPair(db,query) 
     
  if (xyvalues != null){
    println "Plotting $cName. Num values: "+xyvalues.getItemCount()
    
    series = new XYSeriesCollection()
    series.addSeries(xyvalues)
    chartTitle = "$cName"
    chartpanel = BasicCharts.scatterPlot(chartTitle,"Molarity","Value",series,250,166) 
    // Make font smaller than default...    
    titleFont = new java.awt.Font("SansSerif", java.awt.Font.BOLD,9)
    title = new org.jfree.chart.title.TextTitle(chartTitle,titleFont)
    chartpanel.getChart().setTitle(title);
    return(chartpanel)
  }else{
    println "Skipping $cName (has NULL values).  Num values: "+xyvalues.getItemCount()
    return(null)
  }
}

/**
* Perform the sql query and return the results as a list. 
*/ 
def queryXYPair(db,query){
  xyValues = new XYSeries("Series1")
  db.eachRow(query){result->
    meta = result.getMetaData()
    cols = meta.getColumnCount()
    vals = (0..<cols).collect{result[it]}
    if ((vals[0] == 'null') || (vals[1] == 'null')) return(null);    
    xyValues.add(vals[0] as double,vals[1] as double)
//    rlist << vals
  }
  return(xyValues)
}


/**
* Perform the sql query and return the results as a list. 
*/ 
def query(db,query){
  rlist = []
  db.eachRow(query){
    rlist << it[0]
  }
  return(rlist)
}

/*
Took about 1 minute to generate 224 plots. 
*/